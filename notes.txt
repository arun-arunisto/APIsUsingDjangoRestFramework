----------------------- TODO API  ----------------------------
'''
install django
install django-rest-framework
create Project
create app

'''

in settings.py add app to the installed apps field
[
.....,
'rest_framework',
'todo_api',
]

then map urls of the todo_api using include, so first import include
&
add below line to url_patterns in urls.py
[
....,
path('', include("todo_api.urls")),
]

then create models for the database in models.py
'''
class TodoApi(models.Model):
    todo = models.CharField(max_length=100)
    timestamp = models.DateTimeField(auto_now_add=True, auto_now=False, blank=True)
    completed = models.BooleanField(default=False, blank=True)
    updated = models.DateTimeField(auto_now=True, blank=True)

    def __str__(self):
        return self.todo
'''

convert the model object to an API format, create a py file
serializers.py in your app folder and add code into it
'''
from rest_framework import serializers
from .models import TodoApi

class TodoSerializer(serializers.ModelSerializer):
    class Meta:
        model = TodoApi
        fields = ["todo", "timestamp", "completed", "updated"]
'''

then create views, add code into views.py
'''
from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import TodoApi
from .serializers import TodoSerializer

# Create your views here.
class TodoListApiView(APIView):
    #1. List all
    def get(self, request, *args, **kwargs):
        todos = TodoApi.objects.all()
        serializer = TodoSerializer(todos, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    #2. Create
    def post(self, request, *args, **kwargs):
        data = {
            "todo":request.data.get("todo"),
            "completed":request.data.get("completed")
        }
        serializer = TodoSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
'''

then add view into urls.py in app folder
'''
from django.urls import path, include
from .views import (
    TodoListApiView,
)

urlpatterns = [
    path('api', TodoListApiView.as_view()),
]
'''

After that make migrations and runserver
add data in content like
'''
{
    "todo":"New todo",
    "completed":false
}
'''

then we are create a new class for detail view of todo
for delete and update the todo in views.py
'''
class TodoDetailApiView(APIView): #to detail view of an single todo
    def get_object(self, todo_id):
        try:
            return TodoApi.objects.get(id=todo_id)
        except TodoApi.DoesNotExist:
            return None

    def get(self, todo_id, *args, **kwargs):
        #retrieves the todo with given todo_id
        todo_instance = self.get_object(todo_id)
        if not todo_instance:
            return Response(
                {"res":"Object with todo id does not exist"},
                status=status.HTTP_400_BAD_REQUEST
            )
        serializer = TodoSerializer(todo_instance)
        return Response(serializer.data, status=status.HTTP_200_OK)

    #update
    def put(self, request, todo_id, *args, **kwargs):
        todo_instance = self.get_object(todo_id)
        if not todo_instance:
            return Response(
                {"res": "Object with todo id does not exist"},
                status=status.HTTP_400_BAD_REQUEST
            )
        data = {
            "todo":request.data.get("todo"),
            "completed":request.data.get("completed")
        }
        serializer = TodoSerializer(instance=todo_instance, data=data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    #delete
    def delete(self, todo_id, *args, **kwargs):
        todo_instance = self.get_object(todo_id)
        if not todo_instance:
            return Response(
                {"res": "Object with todo id does not exist"},
                status=status.HTTP_400_BAD_REQUEST
            )
        todo_instance.delete()
        return Response(
            {"res":"Object deleted!"}
        )

'''

then change the app url file by adding new class
'''
from django.urls import path, include
from .views import (
    TodoListApiView,
    TodoDetailApiView,
)

urlpatterns = [
    path('api', TodoListApiView.as_view()),
    path('api/<int:todo_id>/', TodoDetailApiView.as_view())
]
'''
